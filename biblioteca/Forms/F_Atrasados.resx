<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>