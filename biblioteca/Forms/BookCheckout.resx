<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>